    DNode head;
    DNode tail;


    //insert start
    public void insertFirst(int data) {

        DNode newNode = new DNode(data);
        if (isEmpty()) {
            head = tail = newNode;
            
        }

        newNode.next = head;
        newNode.next.prv = newNode;
        newNode.prv = null;
        head = newNode;


    }

    public void insertLast(int data) {
        DNode newNode = new DNode(data);


        if (isEmpty()) {
            head = tail = newNode;
            
        }

        newNode.next = null;
        newNode.prv = tail;
        tail.next = newNode;
        tail = newNode;

    }

    

    public void insertAfterNode(int data, int value) {
        DNode cur = head;
        DNode newNode = new DNode(data);
        if (isEmpty()) {
            System.out.println("no node with this value " + value);
            
        }
        for (; cur != null && cur.data != value; cur = cur.next) ;


        if (cur == null) {

            System.out.println("no node with this value " + value);
           
        }
        if (cur == tail) {
            insertLast(data);

            
        }

        newNode.next = cur.next;
        newNode.prv = cur;
        cur.next.prv = newNode;
        cur.next = newNode;

    }


    public void  InsertInBetween (int element, int value) {
        DNode newNode = new DNode(value);
        if (isEmpty()) {
            System.out.println("Empty list");
            
        }
        if (head.data == element) {
            newNode.next = head;
            head.prv = newNode;
            head = newNode;
        } else if (tail.data == element) {
            newNode.next = tail;
            newNode.prv = tail.prv;
            tail.prv.next = newNode;
            tail.prv = newNode;
        } else {
            DNode curr = head;
            while (curr != null) {
                if (curr.data == element) {
                    newNode.next = curr;
                    newNode.prv = curr.prv;
                    curr.prv.next = newNode;
                    curr.prv = newNode;
                    
                }
                curr = curr.next;
            }
            if (curr == null) {
                System.out.println("Not found");
            }
        }
    }
    //insert end

    //Deleting start
    public void deleteFirst() {
        if (isEmpty()) {
            System.out.println("the List are empty");
           
        }
        if (head==tail) {
            head = tail = null;
            
        }
        head = head.next;
        head.prv = null;
    }

    public void deleteLast() {
        if (isEmpty()) {
            System.out.println("the List are empty");
            
        }
        if (head == tail) {
            head = tail = null;
            
        }
        tail.prv.next = null;
        tail = tail.prv;
    }

   void deleteAfter(int afterData) {
                            if (head == null) {
                            System.out.println("List is empty");
                            
                            }
                            DNode cur = head;
                            while (cur != null && cur.data != afterData) {
                            cur = cur.next;
                            }
                            if (cur == null) {
                            System.out.println("List does not contain the target node");
                            
                            }
                            if (cur.next == null) {
                            System.out.println("The target node is the last node");
                            
                            }
                            cur.next = cur.next.next;

                           if(cur.next != null){
                              cur.next.prv = cur;
                           }

                            }

    public void deleteNode(int value) {
        if (isEmpty()) {
            System.out.println("set are empty");
            
        }
        DNode cur = head;
        while (cur != null && cur.next.data != value) {

            cur = cur.next;
        }
        if (cur == null) {
            System.out.println("the number not found");
            
        }

        deleteAfter(cur.data);

    }

    //Deleting end
    
    
    
    public int ComputesSumLastNodes(int n) {
       if (tail == null || n <= 0) {
            return 0;
                   }
              int sum = 0;
               DNode cur = tail;
       for (int i = 0; i < n && cur != null; i++) {
               sum  += (cur.data);
                cur  = cur.prv;
                          }
                return sum;
              }


    //display start
    public void displayList() {
        DNode cur = head;

        if (isEmpty()) {
           
        }

        for (; cur != null; cur = cur.next) {
            System.out.print(cur.data + " ");
        }
        System.out.println();


    }

    public void displayFirst() {
        if (isEmpty()) {

            
        }

        System.out.println("The head are " + head.data);
    }


    public void displayTail() {

        if (isEmpty()) {

            
        }

        System.out.println("The Tail are " + tail.data);

    }

    public void displayCount() {
        System.out.println("the amount of nodes are " + Count());
    }

    public void displayPreSuss(int value) {
        DNode cur = head;

        for (; cur != null && cur.data != value; cur = cur.next) ;

        if (cur == null) {
            System.out.println("no Node with this Value " + value);
            return;
        }


        if (cur.next != null & cur.prv != null) {
            System.out.println("the prv are " + cur.prv.data);
            System.out.println("the suss are " + cur.next.data);
            return;
        }
        if (cur.prv == null & cur.next != null) {
            System.out.println("no prv");
            System.out.println("the suss are " + cur.next.data);
            return;

        }
        if (cur.next == null & cur.prv != null) {
            System.out.println("the prv are " + cur.prv.data);
            System.out.println("no suss");
            return;
        }

        System.out.println("there is no prv or suss");

    }
    //display end

    //Traversing start
    public int Count() {
        DNode cur = head;
        if (isEmpty()) {
            return 0;

        }
        int count = 0;
        for (; cur != null; cur = cur.next) {
            count++;
        }
        return count;
    }

    public boolean searchNode(int value) {
                 DNode cur = head;
                 while (cur != null) {
               if (cur.data == value) {
                 return true;
                    }
                 cur = cur.next;
                          }
                  return false;
                                    }



    //    Traversing end
    public void ReverseQueue() {
        if (isEmpty()) {
            System.out.println("Empty list");
            
        }
        if (isHeadEqTail()) {
            System.out.println("List with only one element");
            
        }
        DNode curr = head;
        DNode prev = null;
        DNode nextNode;
        while (curr != null) {
            nextNode = curr.next;
            curr.next = prev;
            curr.prv = nextNode;
            prev = curr;
            curr = nextNode;
        }
        tail = head;
        head = prev;
    }


    //general methods
    boolean isEmpty() {
        return head == null;
    }

    boolean isHeadEqTail() {

        return head == tail;
    }
    
    public int size() {
        int size = 0;
        DNode cur = head;
        for (; cur != null; cur = cur.next) {
            size++;
        }
        return size;
    }

    public int size(DNode start) {
        int coun = 0;
        DNode curr = start;
        while(curr != null) {
            coun++;
            curr = curr.next;
        }
        return coun;
    }
    
    
    
     public int[] convertLinkedListToArray() {
        int count = 0;
        DNode curr = head;
        while (curr != null) {
            count++;
            curr = curr.next;
        }
        curr = head;
        int[] arr = new int[count];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = curr.data;
            curr = curr.next;
        }
        return arr;
    }

